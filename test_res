{
  res[j] = first[j] >> shift;
  if (j == 0)
    {
      res[j] = res[j] & 7;
      res[j] += 240;
    }
  else
  {
    res[j] = res[j] & 63;
    res[j] += 128;
  }
  shift -= 6;
  i++;
  j++;
}


#include <stdio.h>
# include <unistd.h>
# include <stdlib.h>
# include <stdarg.h>
# include <locale.h>
# include <wchar.h>

#include "ft_printf.h"

char *print_hex_ind(uintmax_t nbr, unsigned int base, int count)
{
	static char *res;
	static int i;

	i = 0;
	res = NULL;
	res = (char *)malloc(count + 1);
	while (i < count)
		res[i++] = 0;
	i = 0;
	if (nbr >= base)
		print_hex_ind(nbr / base, base, count);
	if ((nbr % base) < 10)
		res[i++] = (nbr % base) + 48;
	else
		res[i++] = (nbr % base) - 10 + 65;
	return (res);
}

/*int main()
{
	int i = 0;
	int j;
	j = 0;
	wchar_t test;
	test = L'®';
	unsigned int code = (unsigned int)L'®';
	printf("CODE %d\n", code);
	char *hex_code;
	hex_code = NULL;
	hex_code = print_hex_ind(code, 16, 16);
	printf("HEX_CODE %s\n", hex_code);
	int len = ft_strlen(hex_code);
	char tmp[5];
	//tmp = NULL;
	while (i < 4)
	{
		tmp[i] = '0';
		i++;
	}
	i--;
	j = len - 1;
	printf("CODE %d\n", j);
	if (len < 4)
	{
		while(j >= 0)
		{
			tmp[i] = hex_code[j];
			i--;
			j--;
		}
	}
	printf("HEX_CODE %s\n", tmp);
	int k = 0;
	int l = 0;
	char be_code[4][5]
	while (k < 4)
	{
		l = 0;
			while (l < 5)
			{
				be_code[k][l] = '0';
				l++;
			}
		k++;
	}
	k = 0;
	char *tmp2;
	while (k < 4)
	{

	}
	char *code_2 = print_hex_ind(code, 2, 20);
	printf("HEX_CODE %s\n", code_2);*/
	/*const double RENT = 3852.99;
	printf("*%8f*\n", RENT);
	printf("*%e*\n", RENT);
	printf("*%4.2f*\n", RENT);
	printf("*%3.1f*\n", RENT);
	printf("*%10.3f*\n", RENT);
	printf("*%10.3E*\n", RENT);
	printf("*%+4.2f*\n", RENT);

	printf("%x %X %#x\n", 31, 31, 31);
	printf("**%d**% d% d **\n", 42, 42, -42);
	printf("**%5d**%5.3d**%05d**%05.3d**\n", 6, 6, 6, 6);
	printf("\n");

	printf("[%2s]\n", BLURB);
	printf("[%24s]\n", BLURB);
	printf("[%24.5s]\n", BLURB);
	printf("[%-24.5s]\n", BLURB);*/

	/*printf ("%6d\n%6d\n%6d\n",123,42,1523);
	printf ("%-6d\n%-6d\n%-6d\n",123,42,1523);
	printf ("%6d\n", 123);
	printf ("%o\n",123);
	short int d1 = 123;
	printf ("%+10.6hderetr%d\n", d1);
	printf ("%lggfhfhfgh\n",123);*/
	//printf ("%LS\n", "123");

//}

int main(void)
{
	//setlocale (LC_ALL, "");
	int i;
	int j;
	int bytes_count;
	int code;
	char res[4];
	unsigned int first[4];
	int shift;

	i = 0;
	j = 0;
	code = 0;
	bytes_count = 0;

	wchar_t *test;
	test = L"l䀥dfdаdfsf‣";

	while (test[i] != 0)
	{
		if (test[i] <= 127)
		{
			write(1, &test[i], 1);
		}
		else
		{
			j = 0;
			bytes_count = 0;
			if (test[i] > 127 && test[i] <= 2047)
			{
				j = 0;
				bytes_count = 2;
				shift = 6;
				while (j < bytes_count)
				{
					first[j] = test[i];
					j++;
				}
				j = 0;
				res[j] = first[j] >> shift;
				res[j] = res[0] & 31;
				res[j] += 192;
				shift -= 6;
				i++;
				j++;
				res[j] = first[j] >> shift;
				res[j] = first[j] & 63;
				res[j] += 128;
				write(1, res, bytes_count);
				continue ;
			}
			else if (test[i] > 2047 && test[i] <= 65535)
			{
				j = 0;
				bytes_count = 3;
				shift = 12;
				while (j < bytes_count)
				{
					first[j] = test[i];
					j++;
				}
				j = 0;
				res[j] = first[j] >> shift;
				res[j] = res[0] & 15;
				res[j] += 224;
				shift -= 6;
				i++;
				j++;
				res[j] = first[j] >> shift;
				res[j] = res[1] & 63;
				res[j] += 128;
				shift -= 6;
				i++;
				j++;
				res[j] = first[j] >> shift;
				res[j] = first[j] & 63;
				res[j] += 128;
				write(1, res, bytes_count);
				continue ;
			}
			else if (test[i] > 65535 && test[i] <= 1114111)
			{
				j = 0;
				bytes_count = 4;
				shift = 18;
				while (j < bytes_count)
				{
					first[j] = test[i];
					j++;
				}
				j = 0;
				while (j < bytes_count)
				{
					i++;
					j++;
				}
				res[j] = first[j] >> shift;
				res[j] = res[0] & 7;
				res[j] += 240;
				shift -= 6;
				j++;
				i++;
				res[j] = first[j] >> shift;
				res[j] = res[1] & 63;
				res[j] += 128;
				i++;
				j++;
				res[j] = first[j] >> shift;
				res[j] = res[2] & 63;
				res[j] += 128;
				i++;
				j++;
				res[j] = first[j] >> shift;
				res[j] = first[j] & 63;
				res[j] += 128;
				write(1, res, bytes_count);
				continue ;
			}
		}
		i++;
	}


  /*
[ -------STARTING ALL UNIT TESTS------- ]
>>>> 00_no_conv.spec.c ----------- [Ok !] ....
>>>> 01_conv_s_simple.spec.c ----- [Ok !] ......
>>>> 02_conv_s_multiple.spec.c --- [Ok !] ...
>>>> 03_conv_d.spec.c ------------ [Ok !] .......
>>>> 04_conv_p.spec.c ------------ [Ok !] .....
>>>> 05_percent_escape.spec.c ---- [Ok !] ........
>>>> 06_mix_sdp_percent.spec.c --- [Ok !] ..
>>>> 07_conv_S.spec.c ------------ [FAIL] FFFFS [FAIL] test_simple -> printf("%S", L"з±≥")
>>>> 08_conv_D.spec.c ------------ [FAIL] ..F. [FAIL] test_long_min -> printf("%D", LONG_MIN)
>>>> 09_conv_i.spec.c ------------ [Ok !] .....
>>>> 10_conv_o.spec.c ------------ [Ok !] ....
>>>> 11_conv_O.spec.c ------------ [Ok !] .....
>>>> 12_conv_u.spec.c ------------ [Ok !] .....
>>>> 13_conv_U.spec.c ------------ [FAIL] ..F [FAIL] test_ulong_max -> printf("%U", ULONG_MAX)
>>>> 14_conv_x.spec.c ------------ [Ok !] .....
>>>> 15_conv_X.spec.c ------------ [Ok !] .....
>>>> 16_conv_c.spec.c ------------ [Ok !] ....
>>>> 17_conv_C.spec.c ------------ [FAIL] ...FFFFF. [FAIL] test_chinese -> printf("%C", L'зM-^LЂ')
>>>> 18_mix_all_previous.spec.c -- [FAIL] FF [FAIL] test_simple -> printf("%s %C %d %p %x %% %S", "bonjour ", L'и©≤', 42, &free, 42, L"ўM-^DЎ≠ўM-^E ЎЃўM-^FЎ...
>>>> 40_length_modif_l.spec.c ---- [FAIL] ....F....FFF..FF... [FAIL] test_ld_long_min -> printf("%ld", LONG_MIN)
>>>> 41_length_modif_ll.spec.c --- [FAIL] ..F..FFF..... [FAIL] test_lld_llong_min -> printf("%lld", LLONG_MIN)
>>>> 42_length_modif_h.spec.c ---- [FAIL] ............F [FAIL] test_err_hd_up_max -> printf("%hD, %hD", 0, USHRT_MAX)
>>>> 43_length_modif_hh.spec.c --- [FAIL] ..................FFFFS [FAIL] test_err_hho_up_max -> printf("%hhO, %hhO", 0, USHRT_MAX)
>>>> 43_length_modif_j.spec.c ---- [FAIL] ..F..FFF..... [FAIL] test_jd_llong_min -> printf("%jd", LLONG_MIN)
>>>> 44_length_modif_z.spec.c ---- [FAIL] ....FF..... [FAIL] test_zu_unsign_long_long_max -> printf("%zu, %zu", 0, ULLONG_MAX)
>>>> 45_length_modif_edge_cases.sp [Ok !] .
>>>> 50_min_width.spec.c --------- [FAIL] .........FFF [FAIL] invalidConvSpec_withMinWith -> printf("{%10R}")
>>>> 51_min_width_flag_minus.spec. [Ok !] ...
>>>> 52_min_width_flag_zero.spec.c [FAIL] ........F.. [FAIL] wide_str_posMinWidth_zeroFlag -> printf("{%030S}", L"жM-M-^QжM-^XѓдЄM-еM-^O™зM-^LЂгM-M-^B")
>>>> 53_min_width_non_valid_conv.s [FAIL] F [FAIL] nonValidConv_negativeMinWidth -> printf("{%-15Z}", 123)
>>>> 60_flag_sharp.spec.c -------- [FAIL] .F......... [FAIL] test_octal_zero -> printf("%#o", 0)
>>>> 61_flag_plus.spec.c --------- [Ok !] .............
>>>> 62_flag_space.spec.c -------- [FAIL] ............S.. [SEGV] SNullString_spaceFlag -> (null)
>>>> 69_flag_mix.spec.c ---------- [FAIL] ...F..... [FAIL] mix_space_zero -> printf("{% 03d}", 0)
>>>> 70_precision_for_diu.spec.c - [Ok !] ..............................
>>>> 71_precision_for_oOxX.spec.c  [Ok !] ...............................
>>>> 72_precision_for_sS.spec.c -- [FAIL] ........FFFFFF [FAIL] test_precision_s_implicit_precision -> printf("%4.s", "42")
>>>> 73_precision_for_cC.spec.c -- [Ok !] ......
>>>> 74_precision_for_p.spec.c --- [FAIL] .F..FF [FAIL] pNullPointer_3Precision -> printf("%.5p", 0)
>>>> 75_precision_for_percent.spec [Ok !] .
>>>> 79_precision_mixed_with_flags [FAIL] ....F.FF.F [FAIL] string_precision_minwdith_and_flagZero -> printf("{%05.s}", 0)
>>>> 90_incomptbl_values_sdpi.spec [FAIL] .FF. [FAIL] test_zi -> printf("%zi", LLONG_MIN)
>>>> 91_incomptbl_values_uUSDcC.sp [Ok !] ......
>>>> 92_incomptbl_values_oOxX.spec [FAIL] ..F.... [FAIL] test_octal_up_long_min -> printf("%O", LONG_MIN)
>>>> bonus_01_wildcard.spec.c ---- [FAIL] .F..F.....F.F [FAIL] wildcard_for_min_width_negative -> printf("{%*d}", -5, 42)
>>>> bonus_02_wildcard_multi.spec. [Ok !] .
>>>> bonus_03_wildcard_flag_mix.sp [FAIL] FFF. [FAIL] digit_wildcard_and_min_width_value1 -> printf("{%3*d}", 0, 0)
>>>> bonus_10_conv_fF.spec.c ----- [FAIL] FFFF [FAIL] simple_small_nbr -> printf("{%f}{%F}", 1.42, 1.42)
[ ----------END OF UNIT TESTS---------- ]

>>>> Result: 23/48 test suites passed. 325/396 tests passed (dots).

*/

усли ю выводится через ю, в чекере ошибок на 1 больше

>>>> 00_no_conv.spec.c ----------- [Ok !] ....
>>>> 01_conv_s_simple.spec.c ----- [Ok !] ......
>>>> 02_conv_s_multiple.spec.c --- [Ok !] ...
>>>> 03_conv_d.spec.c ------------ [Ok !] .......
>>>> 04_conv_p.spec.c ------------ [Ok !] .....
>>>> 05_percent_escape.spec.c ---- [Ok !] ........
>>>> 06_mix_sdp_percent.spec.c --- [Ok !] ..
>>>> 07_conv_S.spec.c ------------ [FAIL] FFFFS [FAIL] test_simple -> printf("%S", L"з±≥")
>>>> 08_conv_D.spec.c ------------ [FAIL] ..F. [FAIL] test_long_min -> printf("%D", LONG_MIN)
>>>> 09_conv_i.spec.c ------------ [Ok !] .....
>>>> 10_conv_o.spec.c ------------ [Ok !] ....
>>>> 11_conv_O.spec.c ------------ [Ok !] .....
>>>> 12_conv_u.spec.c ------------ [Ok !] .....
>>>> 13_conv_U.spec.c ------------ [FAIL] .F. [FAIL] test_ulong_max_half -> printf("%U", ULONG_MAX / 2)
>>>> 14_conv_x.spec.c ------------ [Ok !] .....
>>>> 15_conv_X.spec.c ------------ [Ok !] .....
>>>> 16_conv_c.spec.c ------------ [Ok !] ....
>>>> 17_conv_C.spec.c ------------ [FAIL] ...FFFFF. [FAIL] test_chinese -> printf("%C", L'зM-^LЂ')
>>>> 18_mix_all_previous.spec.c -- [FAIL] FF [FAIL] test_simple -> printf("%s %C %d %p %x %% %S", "bonjour ", L'и©≤', 42, &free, 42, L"ўM-^DЎ≠ўM-^E ЎЃўM-^FЎ...
>>>> 40_length_modif_l.spec.c ---- [FAIL] ....F....F.F..FF... [FAIL] test_ld_long_min -> printf("%ld", LONG_MIN)
>>>> 41_length_modif_ll.spec.c --- [FAIL] ..F..F.F..... [FAIL] test_lld_llong_min -> printf("%lld", LLONG_MIN)
>>>> 42_length_modif_h.spec.c ---- [FAIL] ............F [FAIL] test_err_hd_up_max -> printf("%hD, %hD", 0, USHRT_MAX)
>>>> 43_length_modif_hh.spec.c --- [FAIL] ..................F.FFS [FAIL] test_err_hho_up_max -> printf("%hhO, %hhO", 0, USHRT_MAX)
>>>> 43_length_modif_j.spec.c ---- [FAIL] ..F..F.F..... [FAIL] test_jd_llong_min -> printf("%jd", LLONG_MIN)
>>>> 44_length_modif_z.spec.c ---- [FAIL] .....F..... [FAIL] test_zo_unsign_long_long_max -> printf("%zo, %zo", 0, ULLONG_MAX)
>>>> 45_length_modif_edge_cases.sp [Ok !] .
>>>> 50_min_width.spec.c --------- [FAIL] .........FFF [FAIL] invalidConvSpec_withMinWith -> printf("{%10R}")
>>>> 51_min_width_flag_minus.spec. [Ok !] ...
>>>> 52_min_width_flag_zero.spec.c [FAIL] ........F.. [FAIL] wide_str_posMinWidth_zeroFlag -> printf("{%030S}", L"жM-M-^QжM-^XѓдЄM-еM-^O™зM-^LЂгM-M-^B")
>>>> 53_min_width_non_valid_conv.s [FAIL] F [FAIL] nonValidConv_negativeMinWidth -> printf("{%-15Z}", 123)
>>>> 60_flag_sharp.spec.c -------- [FAIL] .F......... [FAIL] test_octal_zero -> printf("%#o", 0)
>>>> 61_flag_plus.spec.c --------- [Ok !] .............
>>>> 62_flag_space.spec.c -------- [FAIL] ............S.. [SEGV] SNullString_spaceFlag -> (null)
>>>> 69_flag_mix.spec.c ---------- [FAIL] ...F..... [FAIL] mix_space_zero -> printf("{% 03d}", 0)
>>>> 70_precision_for_diu.spec.c - [FAIL] .............................F [FAIL] test_precision_u_zero_value -> printf("%.u, %.0u", 0, 0)
>>>> 71_precision_for_oOxX.spec.c  [Ok !] ...............................
>>>> 72_precision_for_sS.spec.c -- [FAIL] ........FFFFFF [FAIL] test_precision_s_implicit_precision -> printf("%4.s", "42")
>>>> 73_precision_for_cC.spec.c -- [Ok !] ......
>>>> 74_precision_for_p.spec.c --- [FAIL] .F..FF [FAIL] pNullPointer_3Precision -> printf("%.5p", 0)
>>>> 75_precision_for_percent.spec [Ok !] .
>>>> 79_precision_mixed_with_flags [FAIL] ....F.FF.F [FAIL] string_precision_minwdith_and_flagZero -> printf("{%05.s}", 0)
>>>> 90_incomptbl_values_sdpi.spec [FAIL] .FF. [FAIL] test_zi -> printf("%zi", LLONG_MIN)
>>>> 91_incomptbl_values_uUSDcC.sp [Ok !] ......
>>>> 92_incomptbl_values_oOxX.spec [FAIL] ..F.... [FAIL] test_octal_up_long_min -> printf("%O", LONG_MIN)
>>>> bonus_01_wildcard.spec.c ---- [FAIL] .F..F.....F.F [FAIL] wildcard_for_min_width_negative -> printf("{%*d}", -5, 42)
>>>> bonus_02_wildcard_multi.spec. [Ok !] .
>>>> bonus_03_wildcard_flag_mix.sp [FAIL] FFF. [FAIL] digit_wildcard_and_min_width_value1 -> printf("{%3*d}", 0, 0)
>>>> bonus_10_conv_fF.spec.c ----- [FAIL] FFFF [FAIL] simple_small_nbr -> printf("{%f}{%F}", 1.42, 1.42)
[ ----------END OF UNIT TESTS---------- ]

>>>> Result: 22/48 test suites passed. 329/396 tests passed (dots).

23
>>>> 17_conv_C.spec.c ------------ [FAIL] ...FFFFF. [FAIL] test_chinese -> printf("%C", L'зM-^LЂ')
>>>> 18_mix_all_previous.spec.c -- [FAIL] FF [FAIL] test_simple -> printf("%s %C %d %p %x %% %S", "bonjour ", L'и©≤', 42, &free, 42, L"ўM-^DЎ≠ўM-^E ЎЃўM-^FЎ...
>>>> 40_length_modif_l.spec.c ---- [FAIL] ....F....F.F..FF... [FAIL] test_ld_long_min -> printf("%ld", LONG_MIN)
>>>> 41_length_modif_ll.spec.c --- [FAIL] ..F..F.F..... [FAIL] test_lld_llong_min -> printf("%lld", LLONG_MIN)
>>>> 42_length_modif_h.spec.c ---- [Ok !] .............
>>>> 43_length_modif_hh.spec.c --- [FAIL] .....................FS [FAIL] test_err_hhc_up_max -> printf("%hhC, %hhC", 0, L'з±≥')
>>>> 43_length_modif_j.spec.c ---- [FAIL] ..F..F.F..... [FAIL] test_jd_llong_min -> printf("%jd", LLONG_MIN)
>>>> 44_length_modif_z.spec.c ---- [FAIL] .....F..... [FAIL] test_zo_unsign_long_long_max -> printf("%zo, %zo", 0, ULLONG_MAX)
>>>> 45_length_modif_edge_cases.sp [Ok !] .
>>>> 50_min_width.spec.c --------- [FAIL] .........FFF [FAIL] invalidConvSpec_withMinWith -> printf("{%10R}")
>>>> 51_min_width_flag_minus.spec. [Ok !] ...
>>>> 52_min_width_flag_zero.spec.c [FAIL] ........F.. [FAIL] wide_str_posMinWidth_zeroFlag -> printf("{%030S}", L"жM-M-^QжM-^XѓдЄM-еM-^O™зM-^LЂгM-M-^B")
>>>> 53_min_width_non_valid_conv.s [FAIL] F [FAIL] nonValidConv_negativeMinWidth -> printf("{%-15Z}", 123)
>>>> 60_flag_sharp.spec.c -------- [FAIL] .F......... [FAIL] test_octal_zero -> printf("%#o", 0)
>>>> 61_flag_plus.spec.c --------- [Ok !] .............
>>>> 62_flag_space.spec.c -------- [FAIL] ............S.. [SEGV] SNullString_spaceFlag -> (null)
>>>> 69_flag_mix.spec.c ---------- [Ok !] .........
>>>> 70_precision_for_diu.spec.c - [FAIL] .............................F [FAIL] test_precision_u_zero_value -> printf("%.u, %.0u", 0, 0)
>>>> 71_precision_for_oOxX.spec.c  [Ok !] ...............................
>>>> 72_precision_for_sS.spec.c -- [FAIL] .........FFFFF [FAIL] test_precision_S -> printf("%.4S", L"жM-M-^QжM-^XѓдЄM-еM-^O™зM-^LЂгM-M-^B")
>>>> 73_precision_for_cC.spec.c -- [Ok !] ......
>>>> 74_precision_for_p.spec.c --- [FAIL] .F..FF [FAIL] pNullPointer_3Precision -> printf("%.5p", 0)
>>>> 75_precision_for_percent.spec [Ok !] .
>>>> 79_precision_mixed_with_flags [FAIL] ......FF.F [FAIL] nonValidConvSpec_precision_minwdith_and_flagZero -> printf("{%05.Z}", 0)
>>>> 90_incomptbl_values_sdpi.spec [FAIL] .FF. [FAIL] test_zi -> printf("%zi", LLONG_MIN)
>>>> 91_incomptbl_values_uUSDcC.sp [Ok !] ......
>>>> 92_incomptbl_values_oOxX.spec [FAIL] ..F.... [FAIL] test_octal_up_long_min -> printf("%O", LONG_MIN)
>>>> bonus_01_wildcard.spec.c ---- [FAIL] ............F [FAIL] pointer_wildcard -> printf("{%3*p}", 10, 0)
>>>> bonus_02_wildcard_multi.spec. [Ok !] .
>>>> bonus_03_wildcard_flag_mix.sp [FAIL] FFF. [FAIL] digit_wildcard_and_min_width_value1 -> printf("{%3*d}", 0, 0)
>>>> bonus_10_conv_fF.spec.c ----- [FAIL] FFFF [FAIL] simple_small_nbr -> printf("{%f}{%F}", 1.42, 1.42)
[ ----------END OF UNIT TESTS---------- ]


24

>>>> 17_conv_C.spec.c ------------ [FAIL] ...FFFFF. [FAIL] test_chinese -> printf("%C", L'зM-^LЂ')
>>>> 18_mix_all_previous.spec.c -- [FAIL] FF [FAIL] test_simple -> printf("%s %C %d %p %x %% %S", "bonjour ", L'и©≤', 42, &free, 42, L"ўM-^DЎ≠ўM-^E ЎЃўM-^FЎ...
>>>> 40_length_modif_l.spec.c ---- [FAIL] ....F....F.F..FF... [FAIL] test_ld_long_min -> printf("%ld", LONG_MIN)
>>>> 41_length_modif_ll.spec.c --- [FAIL] ..F..F.F..... [FAIL] test_lld_llong_min -> printf("%lld", LLONG_MIN)
>>>> 42_length_modif_h.spec.c ---- [Ok !] .............
>>>> 43_length_modif_hh.spec.c --- [FAIL] .....................FS [FAIL] test_err_hhc_up_max -> printf("%hhC, %hhC", 0, L'з±≥')
>>>> 43_length_modif_j.spec.c ---- [FAIL] ..F..F.F..... [FAIL] test_jd_llong_min -> printf("%jd", LLONG_MIN)
>>>> 44_length_modif_z.spec.c ---- [FAIL] .....F..... [FAIL] test_zo_unsign_long_long_max -> printf("%zo, %zo", 0, ULLONG_MAX)
>>>> 45_length_modif_edge_cases.sp [Ok !] .
>>>> 50_min_width.spec.c --------- [FAIL] .........FFF [FAIL] invalidConvSpec_withMinWith -> printf("{%10R}")
>>>> 51_min_width_flag_minus.spec. [Ok !] ...
>>>> 52_min_width_flag_zero.spec.c [FAIL] ........F.. [FAIL] wide_str_posMinWidth_zeroFlag -> printf("{%030S}", L"жM-M-^QжM-^XѓдЄM-еM-^O™зM-^LЂгM-M-^B")
>>>> 53_min_width_non_valid_conv.s [FAIL] F [FAIL] nonValidConv_negativeMinWidth -> printf("{%-15Z}", 123)
>>>> 60_flag_sharp.spec.c -------- [FAIL] .F......... [FAIL] test_octal_zero -> printf("%#o", 0)
>>>> 61_flag_plus.spec.c --------- [Ok !] .............
>>>> 62_flag_space.spec.c -------- [FAIL] ............S.. [SEGV] SNullString_spaceFlag -> (null)
>>>> 69_flag_mix.spec.c ---------- [FAIL] ........F [FAIL] octalUppercase_precision_sharpFlag_zeroValue -> printf("%#.O", 0)
>>>> 70_precision_for_diu.spec.c - [FAIL] .............................F [FAIL] test_precision_u_zero_value -> printf("%.u, %.0u", 0, 0)
>>>> 71_precision_for_oOxX.spec.c  [Ok !] ...............................
>>>> 72_precision_for_sS.spec.c -- [FAIL] .........FFFFF [FAIL] test_precision_S -> printf("%.4S", L"жM-M-^QжM-^XѓдЄM-еM-^O™зM-^LЂгM-M-^B")
>>>> 73_precision_for_cC.spec.c -- [Ok !] ......
>>>> 74_precision_for_p.spec.c --- [FAIL] .F..FF [FAIL] pNullPointer_3Precision -> printf("%.5p", 0)
>>>> 75_precision_for_percent.spec [Ok !] .
>>>> 79_precision_mixed_with_flags [FAIL] F.....FF.F [FAIL] test_precision_o_sharp_zero -> printf("%#.o, %#.0o", 0, 0)
>>>> 90_incomptbl_values_sdpi.spec [FAIL] .FF. [FAIL] test_zi -> printf("%zi", LLONG_MIN)
>>>> 91_incomptbl_values_uUSDcC.sp [Ok !] ......
>>>> 92_incomptbl_values_oOxX.spec [FAIL] ..F.... [FAIL] test_octal_up_long_min -> printf("%O", LONG_MIN)
>>>> bonus_01_wildcard.spec.c ---- [FAIL] ............F [FAIL] pointer_wildcard -> printf("{%3*p}", 10, 0)
>>>> bonus_02_wildcard_multi.spec. [Ok !] .
>>>> bonus_03_wildcard_flag_mix.sp [FAIL] FFF. [FAIL] digit_wildcard_and_min_width_value1 -> printf("{%3*d}", 0, 0)
>>>> bonus_10_conv_fF.spec.c ----- [FAIL] FFFF [FAIL] simple_small_nbr -> printf("{%f}{%F}", 1.42, 1.42)
